<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2009-2011, bad robot (london) ltd
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--
Fool Maven's validator:
(see http://jira.codehaus.org/browse/MSITE-440)
<document blah="true">
</document>
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Contention Monitoring</title>
        <author>Toby Weston</author>
    </properties>

    <body>

        <section name="Contention Monitoring">

            <p>
                In making comparisons between the implementations, before making conclusions, it may be useful to
                understand any contention between competing threads on resources. For us, we're interested in contention
                when access to shared memory; when two or more threads simultaneously attempt to access some shared
                memory and a guard rejects access.
            </p>
            <p>
                For the purposes of this discussion, we can define contention as follows.
            </p>
            <ol>
                <li>
                    <p>
                        <b>Pessimistic (<code>synchronized</code>) </b> - the number of requests blocked whilst attempting
                        to acquire an object monitor.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Optimistic (<code>Lock</code>s) </b> - the number of requests made to wait whilst attempting
                        to acquire a lock.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Optimistic (Software Transactional Memory) </b> - the number of aborted atomic updates (this
                        assumes an abort is the result of an attempt to access a transactional reference which has already
                        been accessed and not some other runtime exception).

                    </p>
                </li>
            </ol>
            <p>
                It may also be useful to represent the contention as a ratio against the number successful requests. For
                example, the number of blocked requests divided by the total number of requests. Comparing contention
                ratios should be done over the same number of requests to be fair.
            </p>
            <p>
                See <a href="appendix_A.html">Appendix A</a> for some additional background.
            </p>

            <subsection name="Contention in Pessimistic Concurrency Control">

            </subsection>

            <subsection name="Contention in Software Transaction Memory">

            </subsection>

        </section>

    </body>

</document>