<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2009-2011, bad robot (london) ltd
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!--
Fool Maven's validator:
(see http://jira.codehaus.org/browse/MSITE-440)
<document blah="true">
</document>
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Conclusions</title>
        <author>Toby Weston</author>
    </properties>

    <body>

        <section name="Conclusions">

            <p>
                ...
            </p>

            <subsection name="General Comments / Observations">
                <p>
                    In the pessimistic world, contended locks obviously block. The misconception that locking is expensive
                    comes from this but in fact, uncontended locks add only tens of nanoseconds (biased locking at around
                    2-4 clock cycles and fast user-model locks otherwise). This is all highly optimised by the JVM as
                    synchronisation has been so common in development. Things like lock elision, escape analysis, adaptive
                    locking and lock coarsening all aim to correct the oversights of the developer. These optimisations
                    and the support for the pessimistic model from the language have set its place and we won't be seeing
                    it go away for some time yet.
                </p>
                <p>
                    From <a href="http://www.azulsystems.com/blog/wp-content/uploads/2011/03/2011_WhatDoesJVMDo.pdf">some guy</a>
                </p>
            </subsection>

            <subsection name="Fine Grained Concurrent Components">
                <p>
                    Stressing components like the instrumentation classes in a concurrent context demonstrates typical
                    concurrency control of fine-grained shared memory. It does not, however, demonstrate
                    coarse grained concurrency like the type you might expect when using <i>business components</i>.
                    What I mean here is that when two or more <i>business processes</i> are run in parallel, the same
                    kind of problems may appear as when we access fine-grained shared memory. The consistency of critical
                    sections may still need to be preserved and race conditions between processes may still exist.
                </p>
                <p>
                    This discussion hasn't focused on this at all.
                </p>
            </subsection>

            <subsection name="Pessimistic / Lock Based Synchronisation">
                <p>
                    As we noted in the <a href="shared.html">Shared Memory Model</a> section, pessimistic solutions
                    revolve around using intrinsic locks, essentially using the <code>synchronized</code> keyword. In
                    looking at solutions using this approach, it's important to be aware of some drawbacks associated
                    with it, namely;
                </p>
                <ul>
                    <li>
                        <p>
                           Lock's can block indefinitely, causing non-recoverable liveliness problems such as deadlock.
                        </p>
                    </li>
                    <li>
                        <p>
                           Various up-front strategies must be employed to avoid situations above (for example, ensuring
                           consistent lock acquisition ordering to avoid deadlock.
                        </p>
                    </li>
                </ul>
            </subsection>
        </section>

    </body>

</document>