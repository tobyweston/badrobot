<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2009-2011, bad robot (london) ltd
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--
Fool Maven's validator:
(see http://jira.codehaus.org/browse/MSITE-440)
<document blah="true">
</document>
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Contention Monitoring</title>
        <author>Toby Weston</author>
    </properties>

    <body>

        <section name="Contention Monitoring">

            <p>
                When making comparisons between the implementations, it may be useful to
                understand any contention between competing threads on resources. For us, we're interested in contention
                when accessing shared memory; when two or more threads simultaneously attempt to access some shared
                memory and a guard rejects access.
            </p>
            <p>
                For the purposes of this discussion then, we can define the term <i>contention</i> as follows.
            </p>
            <ol>
                <li>
                    <p>
                        <b>Contention with Pessimistic (<code>synchronized</code>) Control </b> - the number of requests blocked whilst attempting
                        to acquire an object monitor.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Contention with Optimistic (<code>Lock</code>s) Control </b> - the number of requests made to wait whilst attempting
                        to acquire a lock.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Contention with Optimistic (Software Transactional Memory) Control </b> - the number of aborted atomic updates (this
                        assumes an abort is the result of an attempt to access a transactional reference which has already
                        been accessed and not some other runtime exception).

                    </p>
                </li>
            </ol>
            <p>
                It may also be useful to represent the contention as a ratio against the number of successful requests.
                For example, the number of blocked requests divided by the total number of requests. Comparing contention
                ratios should be done over the same number of requests to be fair.
            </p>
            <p>
                See <a href="appendix_A.html">Appendix A</a> for some additional background.
            </p>

            <subsection name="Contention in Pessimistic Concurrency Control">
                <p>
                    To begin with we're interested in recording contention caused by the waiting on monitor acquisition.
                    We can use the Java class <code>ThreadInfo</code> to get information about a particular thread
                    including the block count (the number of times the thread has been in the <code>BLOCKED</code> state)
                    and total elapsed time a thread has been blocked (again, the total time spent in the <code>BLOCKED</code>
                    state). The state transition to <code>BLOCKED</code> is only possible when a thread is waiting to
                    acquire (or re-acquire) an object's monitor.
                </p>
                <p>
                    Unfortunately, the <code>ThreadInfo</code> class doesn't distinguish between the
                    specific monitor a thread is blocked waiting to acquire but we can make some assuptions and provide
                    an approximation using the following code.
                </p>
                <source>
public class ThreadContentionRatio {

    private final Counter count = new AtomicLongCounter();
    private final Map&lt;Long, Long&gt; blocked = new ConcurrentHashMap&lt;Long, Long&gt;();
    private final ThreadMXBean jvm;

    public ThreadContentionRatio(Factory&lt;ThreadMXBean&gt; factory) {
        jvm = factory.create();
    }

    public void sample() {
        count.increment();
        blocked.put(currentThread().getId(), getBlockedCount(currentThread()));
    }

    public Double get() {
        double ratio = 0;
        for (Long blocked : this.blocked.values())
            ratio += (double) blocked / (double) count.get();
        return ratio;
    }

    private long getBlockedCount(Thread thread) {
        return jvm.getThreadInfo(thread.getId()).getBlockedCount();
    }

}
                </source>
                <p>
                    Here, we assume that client will "sample" contention at appropriate times which is basically during
                    load. We also brush over the fact that the instrumentation itself may influence the results. We use
                    an <code>AtomicLongCounter</code> and <code>ConcurrentHashMap</code> as they both offer optimistic
                    thread safety (with the implication being that they are fast). We also defer maintaining the
                    consistency of updating <code>count</code> and <code>blocked</code> together (for example, by using a
                    <code>Guard</code>) for the same reason; namely we're favouring performance over accuracy. We use a
                    factory to create the <code>ThreadMXBean</code> in order to be able to write unit style tests without
                    using real JVM thread metadata.
                </p>
                <p>
                    As we are interested in monitoring contention around locks, we can conveniently use the
                    <code>ThreadContentionRation</code> class from within a custom <code>Guard</code> implementation.
                    The guard is our abstraction for protecting resources and we're interested in understanding contention
                    at this point. As we're also interested in the total number of requests, we can employ the
                    <code>Throughput</code> class defined previously in the same place. For example,
                </p>
                <source>
public class ContentionMonitoringGuard implements Guard, ContentionMonitoringGuardMBean {

    private final ThreadContentionRatio contention = new ThreadContentionRatio(new JmxThreadMxBean());

    @Override
    public &lt;R, E extends Exception&gt; R execute(Callable&lt;R, E&gt; callable) throws E {
        <b>synchronized</b> (this) {
            RequestObserver.Request request = throughput.started();
            try {
                return callable.call();
            } finally {
                request.finished();
                <b>contention.sample();</b>
            }
        }
    }

    @Override
    public Boolean guarding() {
        return true;
    }

    @Override
    public Double getContentionRatio() {
        return contention.get();
    }

    @Override
    public Double getRequestsPerSecond() {
        return throughput.getRequestsPerSecond();
    }

    @Override
    public Long getTotalRequests() {
        return throughput.getTotalRequests();
    }
}
                </source>

                <p>
                    An instance of this guard will be used to protect some shared resource and as such will sample the
                    current thread's block count just before releasing it's monitor. A thread which manages to execute the
                    guarded section (the call to <code>callable.call()</code>) without being blocked will record
                    no contention. If however, whilst that thread is executing the guarded section, another attempts to
                    do the same, it will block until the first has released the monitor. In this case, the second
                    thread will record a blocked attempt when executing the <code>contention.sample()</code> method. A
                    thread dump showing the kind of blocking behaviour that <code>ContentionMonitoringGuard</code> would
                    capture as contention is shown below.
                </p>
<source>
Thread Thread-0@9: (state = RUNNABLE)
 ...
 - bad.robot.pessimistic.ContentionMonitoringGuardTest$1.call(ContentionMonitoringGuardTest.java:14)
 - bad.robot.pessimistic.ContentionMonitoringGuard.execute(ContentionMonitoringGuard.java:36)
 - bad.robot.pessimistic.ContentionMonitoringGuardTest$3.run(ContentionMonitoringGuardTest.java:36)
 - java.lang.Thread.run(Thread.java:722)

Thread Thread-1@10: (state = BLOCKED)
 - bad.robot.pessimistic.ContentionMonitoringGuard.execute(ContentionMonitoringGuard.java:34)
 - bad.robot.pessimistic.ContentionMonitoringGuardTest$3.run(ContentionMonitoringGuardTest.java:36)
 - java.lang.Thread.run(Thread.java:722)
</source>

            <p>
                <code>Thread-0</code> acquired the guard's monitor and is executing (it's in the <code>RUNNABLE</code>
                state) whilst <code>Thread-1</code> is <code>BLOCKED</code> at the <code>execute</code> call.
                When <code>Thread-1</code> finally continues the <code>ContentionMonitoringGuard</code> would indicate a
                contention ratio of 0.5. Half the requests were contended.
            </p>
            </subsection>

            <subsection name="Contention in Locks">

            </subsection>

            <subsection name="Contention in Software Transaction Memory">
                <p>
                    Using hooks into the Multiverse STM library, we can observe the number of aborts vs the number of 
                    successful commits giving us the contention ratio. Multiverse allows us to add a <i>deferred task</i>
                    to execute on successful commit and a <i>compensating task</i> on aborts. Implementing basic tasks 
                    using our existing <code>Counter</code>s, we can wire up a basic contention monitoring <code>Guard</code>. 
                    For example, we can re-use the <code>Increment</code> class shown below to increment <code>Counter</code>s
                    <i>on abort</i> or <i>on commit</i> events.
                </p>
                <source>
public class Increment&lt;T extends Counter&gt; implements Callable&lt;Void, RuntimeException&gt; {

    private final Counter counter;

    public static &lt;T extends Counter&gt; Increment&lt;T&gt; increment(T counter) {
        return new Increment&lt;T&gt;(counter);
    }

    private Increment(T counter) {
        this.counter = counter;
    }

    @Override
    public Void call() throws RuntimeException {
        counter.increment();
        return null;
    }
}                    
                </source>
                <p>
                    The increment functionality is a <code>Callable</code>, so if we adapt it to either a <code>CompensatingTask</code>
                    or <code>DeferredTask</code>,
                </p>
                <source>
public final class CallableAdaptors {

    public static CompensatingTask onAbort(final Callable&lt;?, RuntimeException&gt; callable) {
        return new CompensatingTask() {
            @Override
            public void run() {
                callable.call();
            }
        };
    }

    public static DeferredTask onCommit(final Callable&lt;?, RuntimeException&gt; callable) {
        return new DeferredTask() {
            @Override
            public void run() {
                callable.call();
            }
        };
    }
}                    
                </source>
                <p>
                    we can then schedule increment behaviour on the events using our "runner" (and the infrastructure
                    supplied by Multiverse in the <code>STMUtils</code> class) below.
                </p>
                <source>
public class RunAtomically&lt;R, E extends Exception&gt; extends Atomic&lt;R&gt; {

    private final Callable&lt;R, E&gt; callable;
    private final DeferredTask onCommit;
    private final CompensatingTask onAbort;

    public static &lt;R, E extends Exception&gt; R runAtomically(Callable&lt;R, E&gt; callable) {
        return new RunAtomically&lt;R, E&gt;(callable, new DoNothingDeferredTask(), new DoNothingCompensatingTask()).execute();
    }

    public static &lt;R, E extends Exception&gt; R runAtomically(Callable&lt;R, E&gt; callable, DeferredTask onCommit, CompensatingTask onAbort) {
        return new RunAtomically&lt;R, E&gt;(callable, onCommit, onAbort).execute();
    }

    RunAtomically(Callable&lt;R, E&gt; callable, DeferredTask onCommit, CompensatingTask onAbort) {
        this.callable = callable;
        this.onCommit = onCommit;
        this.onAbort = onAbort;
    }

    @Override
    public R atomically() {
        try {
            <b>StmUtils.scheduleDeferredTask(onCommit);</b>
            <b>StmUtils.scheduleCompensatingTask(onAbort);</b>
            return callable.call();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}                    
                </source>
                <p>
                    Finally, the <code>Guard</code> can use the counters to work out contention when using the "runner"
                    to <code>runAtomically</code>. For example,
                </p>
                <source>
public class ContentionMonitoringStmGuard implements Guard, ContentionMonitoringStmGuardMBean {

    private final Counter aborts = new AtomicLongCounter();
    private final Counter commits = new AtomicLongCounter();

    @Override
    public &lt;R, E extends Exception&gt; R execute(Callable&lt;R, E&gt; callable) throws E {
        return <b>runAtomically(callable, onCommit(increment(commits)), onAbort(increment(aborts)));</b>
    }

    @Override
    public Boolean guarding() {
        return true;
    }

    @Override
    public Double getContentionRatio() {
        return (double) aborts.get() / (double) commits.get();
    }
}                    
                </source>
                
            </subsection>

        </section>

    </body>

</document>