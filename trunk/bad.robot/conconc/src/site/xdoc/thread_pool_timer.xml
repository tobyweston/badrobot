<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2009-2011, bad robot (london) ltd
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Thread Pool Timer</title>
        <author>Toby Weston</author>
    </properties>

    <body>

        <section name="Instrumenting Thread Pool Timer">

            <p></p>

            <subsection name="Testing using Time">
                <p>
                    Testing something that involves time can be tricky as we don't want to introduce non-determinism by
                    using real time. We generally have to try and control time using collaborators such as the <code>Clock</code>.
                    For example, a <code>StopWatch</code> class night maintain an internal time which it can use
                    to compare with the current time to work out elapsed time. A straight forward implementation might
                    look like the following (taken from <a href="http://tempus-fugit.googlecode.com/svn/site/documentation/time.html#Controlling_Time_with_a_Date_Factory">tempus-fugit</a>).
                </p>
<source>
public class BadStopWatch {

    private Date startDate;
    private long elapsedTime;

    public BadStopWatch() {
        this.startDate = new Date();
    }

    public Duration elapsedTime() {
        return millis(new Date().getTime() - startDate.getTime());
    }
}
</source>
                <p>
                    Writing the (rather silly) test below highlights a problem using real time in the class
                </p>
<source>
public class BadStopWatchTest {
    @Test
    public void elapsedTime() throws InterruptedException{
        BadStopWatch watch = new BadStopWatch();
        Thread.sleep(millis(100));
        assertThat(watch.elapsedTime(), is(millis(100)));
    }
}
</source>
                <p>
                    We've introduced non-determinism by using real time, there's no guarantee that we can accurately
                    delay the execution between object constructions and evaluation of the assertions for precisely 100
                    milliseconds. Unsurprisingly, the test is unlikely to pass consistently.
                </p>
                <source>
java.lang.AssertionError:
Expected: is &lt;Duration 100 MILLISECONDS&gt;
     got: &lt;Duration 103 MILLISECONDS&gt;
	at org.junit.Assert.assertThat(Assert.java:778)
	at org.junit.Assert.assertThat(Assert.java:736)
	at com.google.code.tempusfugit.temporal.BadStopWatchTest.elapsedTime(BadStopWatchTest.java:32)
                </source>
                <p>
                    We clearly need a way to inject a clock that we can control. We can improve the implementation above
                    by introducing the <code>Clock</code> interface and injecting a mock instance using <a href="http://www.jmock.org">jmock</a>.
                </p>
<source>
public class BetterStopWatch {

    private Date startDate;
    private long elapsedTime;
    private Clock clock;

    public BetterStopWatch(Clock clock) {
        this.clock = clock;
        this.startDate = clock.time();
    }

    public Duration elapsedTime() {
        return millis(clock.time() - startDate.getTime());
    }
}
</source>
<source>
@Test
public void elapsedTimeFromBetterStopWatch() {
    context.checking(new Expectations() {{
        one(clock).time(); will(returnValue(new Date(0)));
        one(clock).time(); will(returnValue(new Date(100)));
    }});
    BetterStopWatch watch = new BetterStopWatch(clock);
    assertThat(watch.elapsedTime(), is(millis(100)));
}
</source>
                <p>
                    We could also create our own mock to encapsulate this kind of behaviour like the following.
                </p>
                <source>
public final class MovableClock implements Clock {

    private final Date now;

    public MovableClock() {
        now = new Date(0);
    }

    public MovableClock(Date date) {
        now = new Date(date.getTime());
    }

    public Date time() {
        return new Date(now.getTime());
    }

    public void incrementBy(Duration time) {
        now.setTime(now.getTime() + time.inMillis());
    }
} </source>
                <p>
                    With the following test
                </p>
<source>
@Test
public void elapsedTimeFromBetterStopWatch() {
    BetterStopWatch watch = new BetterStopWatch(clock);
    clock.incrementBy(millis(100));
    assertThat(watch.elapsedTime(), is(millis(100)));
}
</source>
            </subsection>

            <subsection name="The Race Condition Involving Time">
                <p>
                    Applying the principle above to the <code>ThreadPoolTimer</code> proved a little more involved. There
                    is a race condition when calculating the mean execution time. Here, we have time being stored along
                    with the total number of executions. Divide one by the other to get the mean, but they are two
                    operations which if uncontrolled, introduce the possibility of unlucky timing in terms of the interleaving
                    with other threads affecting those numbers.
                </p>
<source>
@Override
public Long getMeanExecutionTime() {
    return totalTime / tasks;
}
</source>
                <p>
                    The sequence of events is shown below when access to the two variables is uncoordinated.     
                </p>
                <img alt="uncoordinated access to variables" src="images/thread_pool_timer/fig-1.1.png"/>
<!--<source>-->
<!--Thread A -> totalTime : set value to 1000-->
<!--Thread A -> tasks : set value to 10-->
<!--Main Thread -> totalTime : get value-->
<!--totalTime &ndash;&gt; Main Thread : 1000-->
<!--Main Thread -> tasks : get value-->
<!--tasks &ndash;&gt; Main Thread : 10-->
<!--Main Thread -> Main Thread : totalTime / tasks-->
<!--</source>-->
                <p>
                    Uncoordinated access works fine when <code>Thread A</code> is the only one writing to the variables,
                    the result will be <code>1000 / 10 = 100</code>. However, with the introduction of another thread
                    and different interleaving, the result can be skewed. For example,
                </p>
                <img alt="uncoordinated access to variables" src="images/thread_pool_timer/fig-1.2.png"/>
<!--<source>-->
<!--Thread A -> totalTime : set value to 1000-->
<!--Thread A -> tasks : set value to 10-->
<!--Main Thread -> totalTime : get value-->
<!--totalTime &ndash;&gt; Main Thread : 1000-->
<!--Thread B -> totalTime : set value to 4050-->
<!--Thread B -> tasks : set value to 35-->
<!--Main Thread -> tasks : get value-->
<!--tasks &ndash;&gt; Main Thread : 35-->
<!--Main Thread->Main Thread : totalTime / tasks-->
<!--</source>-->
                <p>
                    With this interleaving, the <code>totalTime</code> is updated to <code>4050</code> but <i>after</i>
                    the main thread has read the value for <code>totalTime</code> and <i>before</i> the related
                    operation to set the task count to <code>35</code> could be completed. This update hasn't been able
                    to complete before part of another operation has begun and so the consistency of the later will be
                    compromised. The values the main thread will use can be seen by the dotted return value above;
                    <code>1000 / 35 = 28.6</code>, it should either be <code>1000 / 10</code> or <code>4050 / 35</code>
                    but not part of each as in the example above.
                </p>
                <p>
                    Testing for consistency of the mean execution time (<code>getMeanExecutionTime</code>) was tricky.
                    Initially, the basic approach for the pessimistic version of the <code>ThreadPoolTimer</code> was to
                    use real time and introduce uniform distribution of time between the threads. We can force an execution
                    time of between zero and five milliseconds and rely on the uniformity of the pseudo-random number
                    generator to make assertions. Any inconsistencies in the updates should cause the assertions to fail.
                </p>
<source>
public class ThreadPoolTimerIntegrationTest {

    private static final ThreadPoolTimer timer = new ThreadPoolTimer(...);

    @Rule public ConcurrentRule concurrent = new ConcurrentRule();
    @Rule public RepeatingRule repeating = new RepeatingRule();

    @Concurrent (count = 50)
    @Repeating (repetition = 100)
    @Test
    public void executeTask() {
        Runnable task = newRunnable();
        timer.beforeExecute(currentThread(), task);
        Introduce.jitter(upTo(millis(5)));
        timer.afterExecute(task, NO_EXCEPTION);
    }

    @AfterClass
    public static void verifyCounters() {
        assertThat(timer.getNumberOfExecutions(), is(5000L));
        assertThat(timer.getMeanExecutionTime(), is(2L));
        assertThat(timer.getTerminated(), is(0L));
    }
}
</source>
                <p>
                    Here, the test is using the same approach to spawning multiple threads as the <code>ThreadCounterIntegrationTest</code>.
                    Using real time here though, we're attempting to introduce a delay of 2.5 milliseconds (on average)
                    between <code>timer.beforeExecute</code> and <code>timer.afterExecute</code>. The assertions
                    ensure that the number of executions is correct (as we know the expected count ahead of time) and
                    make a best guess on the mean execution time. Mostly, this will pass but it still represents an
                    intermittently failing test.
                </p>
                <p>
                    In the optimistic version, it seemed that the actual time to execute outweighed the artificial delay
                    and so skewed the assumption. We were no longer able to rely on the forced delay as the actual
                    execution took proportionally significant time. Anecdotally, this is likely to be caused by contention
                    and retries in the STM but we'll revisit that later. The affect was a good reminder why using real time
                    can be problematic and forced a rethink.
                </p>
                <p>
                    Somehow, we want to control time but with more complex semantics that the simple <code>StopWatch</code>
                    example above. In the case of the <code>ThreadPoolTimer</code> it effectively has to maintain multiple
                    stop watches, so we'd need to control multiple instances of time!
                </p>
            </subsection>

            <subsection name="The Use of ThreadLocal">
                <p>
                    The <code>ThreadLocal</code> class allows us to associate a variable with a particular thread, it
                    basically maintains a map of threads to instance variables. Because only a single thread can access
                    a variable, it is inherently thread-safe and doesn't really fall into a classification as either
                    optimistic or pessimistic control; it's just enforcing serial, single-threaded behaviour.
                </p>
                <p>
                    In testing for the race condition when calculating mean execution time, we make life easier for
                    ourselves if we can control the stop watch used to time the execution from within the test. Usually,
                    we can just use something like the <code>MovableClock</code> class to do this, effectively mocking
                    the stop watch within the test. However, the <code>ThreadPoolTimer</code> is required to
                    use multiple stop watches, one for each thread it's responsible for timing.
                </p>
                <p>
                    For example, when the timer starts the stop watch, it must do so for the current thread. The
                    class requires that the current thread be passed into the <code>beforeExecute</code> method in order
                    to ensure this. When another timer is started by calling the same method (lets say, at the same time,
                    but from a different thread), the class should start a new stop watch tied to the current thread.
                    This requirement is largely influenced by the semantics of the <code>java.util.concurrent.ThreadPoolExecutor</code>
                    which provides the before and after extension points that we'll be using.
                </p>
                <p>
                    A basic implementation would be to associate a thread with a map, start a stop watch and associate
                    it with that thread. Fortunately for us, that's exactly what <code>ThreadLocal</code> provides. So,
                    assuming the method is called with the correct parameters (see the <code>assert</code> below), we
                    can just use a <code>ThreadLocalStopWatch</code> for the <code>timer</code> instance below.
                </p>
                <source>
@Override
public void beforeExecute(Thread thread, Runnable task) {
    assert(Thread.currentThread().equals(thread));
    timer.start();
    // increment the total task count
}

@Override
public void afterExecute(Runnable task, Throwable throwable) {
    timer.stop();
    totalTime.add(timer.elapsedTime());
}
</source>
                <p>
                    This still leaves the question of testing it <i>and</i> controlling the time. The test above uses
                    a static <code>ThreadPoolTimer</code> and so we need to be able to share an instance of a
                    <code>Clock</code> between the threads (as it will also need to be static) but maintain per-thread
                    semantics. Sounds like a job for <code>ThreadLocal</code> again.
                </p>
<source>
public class ThreadLocalMovableClock implements Clock {

    private final ThreadLocal&lt;Date&gt; now;

    public ThreadLocalMovableClock() {
        now = new ThreadLocal&lt;Date&gt;() {
            @Override
            protected Date initialValue() {
                return new Date(0);
            }
        };
    }

    public ThreadLocalMovableClock(final Date date) {
        now = new ThreadLocal&lt;Date&gt;() {
            @Override
            protected Date initialValue() {
                return new Date(date.getTime());
            }
        };
    }

    @Override
    public Date time() {
        return new Date(now.get().getTime());
    }

    public void incrementBy(Duration time) {
        now.get().setTime(now.get().getTime() + time.inMillis());
    }
}
</source>
            </subsection>
            <p>
                We can now use this to make our test more deterministic and not reliant on real time.
            </p>
<source>
public class ThreadPoolTimerIntegrationTest {

    private static final ThreadLocalMovableClock clock = new ThreadLocalMovableClock();
    private static final ThreadPoolTimer timer = new ThreadPoolTimer(...);
    private static final Throwable NO_EXCEPTION = null;

    @Rule public ConcurrentRule concurrent = new ConcurrentRule();
    @Rule public RepeatingRule repeating = new RepeatingRule();

    @Concurrent (count = 50)
    @Repeating (repetition = 100)
    @Test
    public void executeTask() {
        Runnable task = newRunnable();
        timer.beforeExecute(currentThread(), task);
        clock.incrementBy(millis(400));
        timer.afterExecute(task, NO_EXCEPTION);
        Introduce.jitter();
    }

    @AfterClass
    public static void verifyCounters() {
        assertThat(timer.getNumberOfExecutions(), is(5000L));
        assertThat(timer.getMeanExecutionTime(), is(400L));
        assertThat(timer.getTerminated(), is(0L));
    }
}
</source>
            <p>
                To specifically test for the race condition, we should be able to compose the object such that the
                consistency of field updates is maintained but the consistency of the <i>use of those fields</i> in
                unprotected. We can achieve this by using thread safe versions of the <code>Counter</code> collaborators
                but unsafe <code>Guard</code> implementation as it's the guard that protects against the race condition
                but we'll have to make the call to <code>getMeanExecutionTime</code> repeatedly during the test.
            </p>

            <subsection name="What to Guard">
                <p>
                    A basic implementation of the <code>ThreadPoolTimer</code> might look like the following
                </p>
                <source>
public class ThreadPoolTimer implements ThreadPoolObserver, ThreadPoolTimerMBean {

    private final Guard guard;
    private final StopWatch timer;
    private final Counter tasks;
    private final Counter terminated;
    private final AccumulatingCounter&lt;Duration&gt; totalTime;

    public ThreadPoolTimer(Guard guard, StopWatch timer, Counter tasks, Counter terminated, AccumulatingCounter&lt;Duration&gt; totalTime) {
        this.timer = timer;
        this.tasks = tasks;
        this.terminated = terminated;
        this.totalTime = totalTime;
        this.guard = guard;
    }

    @Override
    public void beforeExecute(Thread thread, Runnable task) {
        assert(Thread.currentThread().equals(thread));
        timer.start();
    }

    @Override
    public void afterExecute(Runnable task, Throwable throwable) {
        tasks.increment();
        timer.stop();
        totalTime.add(timer.elapsedTime());
    }

    @Override
    public void terminated() {
        terminated.increment();
    }

    @Override
    public Long getNumberOfExecutions() {
        return tasks.get();
    }

    @Override
    public Long getTotalTime() {
        return totalTime.get();
    }

    @Override
    public Long getMeanExecutionTime() {
        return guard.execute(divide(totalTime, by(tasks)));
    }

    @Override
    public Long getTerminated() {
        return terminated.get();
    }

    @Override
    public void reset() {
        totalTime.reset();
        tasks.reset();
        terminated.reset();
    }
}                    
</source>
                <p>

                </p>
            </subsection>



        </section>

    </body>

</document>