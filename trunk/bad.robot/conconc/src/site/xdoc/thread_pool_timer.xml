<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2009-2011, bad robot (london) ltd
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!--
Fool Maven's validator:
(see http://jira.codehaus.org/browse/MSITE-440)
<document blah="true">
</document>
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Instrumenting Thread Pool Timings</title>
        <author>Toby Weston</author>
    </properties>

    <body>

        <section name="Instrumenting Thread Pool Timings">

            <p></p>

            <subsection name="Testing using Time">
                <p>
                    Testing something that involves time can be tricky as we don't want to introduce non-determinism by
                    using the real system clock. Instead, we generally have to try and control time using collaborators
                    such as mock system clock like the <code>Clock</code> interface. For example, a <code>StopWatch</code>
                    class night maintain an internal time which it can use to compare with the current time in order to
                    work out the elapsed time. A straight forward implementation might look like the following
                    (taken from <a href="http://tempus-fugit.googlecode.com/svn/site/documentation/time.html#Controlling_Time_with_a_Date_Factory">tempus-fugit</a>).
                </p>
<source>
public class BadStopWatch {

    private Date startDate;
    private long elapsedTime;

    public BadStopWatch() {
        this.startDate = new Date();
    }

    public Duration elapsedTime() {
        return millis(new Date().getTime() - startDate.getTime());
    }
}
</source>
                <p>
                    Writing the (rather silly) test below highlights a problem using real time in the class
                </p>
<source>
public class BadStopWatchTest {
    @Test
    public void elapsedTime() throws InterruptedException{
        BadStopWatch watch = new BadStopWatch();
        Thread.sleep(millis(100));
        assertThat(watch.elapsedTime(), is(millis(100)));
    }
}
</source>
                <p>
                    We've introduced non-determinism by using real time, there's no guarantee that we can accurately
                    delay the execution between object constructions and evaluation of the assertions for precisely 100
                    milliseconds. Unsurprisingly, the test is unlikely to pass consistently.
                </p>
                <source>
java.lang.AssertionError:
Expected: is &lt;Duration 100 MILLISECONDS&gt;
     got: &lt;Duration 103 MILLISECONDS&gt;
	at org.junit.Assert.assertThat(Assert.java:778)
	at org.junit.Assert.assertThat(Assert.java:736)
	at com.google.code.tempusfugit.temporal.BadStopWatchTest.elapsedTime(BadStopWatchTest.java:32)
                </source>
                <p>
                    We clearly need a way to inject a clock that we can control. We can improve the implementation above
                    by introducing the <code>Clock</code> interface and injecting a mock instance using <a href="http://www.jmock.org">jmock</a>.
                </p>
<source>
public class BetterStopWatch {

    private Date startDate;
    private long elapsedTime;
    private Clock clock;

    public BetterStopWatch(Clock clock) {
        this.clock = clock;
        this.startDate = clock.time();
    }

    public Duration elapsedTime() {
        return millis(clock.time() - startDate.getTime());
    }
}
</source>
<source>
@Test
public void elapsedTimeFromBetterStopWatch() {
    context.checking(new Expectations() {{
        one(clock).time(); will(returnValue(new Date(0)));
        one(clock).time(); will(returnValue(new Date(100)));
    }});
    BetterStopWatch watch = new BetterStopWatch(clock);
    assertThat(watch.elapsedTime(), is(millis(100)));
}
</source>
                <p>
                    Alternatively, we could create our own mock to encapsulate this kind of behaviour like the following.
                </p>
                <source>
public final class MovableClock implements Clock {

    private final Date now;

    public MovableClock() {
        now = new Date(0);
    }

    public MovableClock(Date date) {
        now = new Date(date.getTime());
    }

    public Date time() {
        return new Date(now.getTime());
    }

    public void incrementBy(Duration time) {
        now.setTime(now.getTime() + time.inMillis());
    }
} </source>
                <p>
                    With the following test
                </p>
<source>
@Test
public void elapsedTimeFromBetterStopWatch() {
    BetterStopWatch watch = new BetterStopWatch(clock);
    clock.incrementBy(millis(100));
    assertThat(watch.elapsedTime(), is(millis(100)));
}
</source>
            </subsection>

            <subsection name="The Race Condition Involving Time">
                <p>
                    Applying the principle above to the <code>ThreadPoolTimer</code> proved a little more involved. There
                    is a race condition when calculating the mean execution time. Here, we have time being stored along
                    with the total number of executions. Divide one by the other to get the mean, but these are two
                    operations which if uncontrolled, introduce the possibility of unlucky timing in terms of the interleaving
                    with other threads affecting those numbers.
                </p>
<source>
@Override
public Long getMeanExecutionTime() {
    return totalTime / tasks;
}
</source>
                <p>
                    The sequence of events is shown below when access to the two variables is uncoordinated.     
                </p>
                <div class="figure">
                    <img alt="uncoordinated access to variables" src="images/thread_pool_timer/fig-1.1.png"/>Ëœ
                </div>
<!--<source>-->
<!--Thread A -> totalTime : set value to 1000-->
<!--Thread A -> tasks : set value to 10-->
<!--Main Thread -> totalTime : get value-->
<!--totalTime &ndash;&gt; Main Thread : 1000-->
<!--Main Thread -> tasks : get value-->
<!--tasks &ndash;&gt; Main Thread : 10-->
<!--Main Thread -> Main Thread : totalTime / tasks-->
<!--</source>-->
                <p>
                    Uncoordinated access works fine when <code>Thread A</code> is the only one writing to the variables,
                    the result will be <code>1000 / 10 = 100</code>. However, with the introduction of another thread
                    and different interleaving, the result can be skewed. For example,
                </p>
                <div class="figure">
                    <img src="images/thread_pool_timer/fig-1.2.png" title="uncoordinated access to variables" alt="uncoordinated access to variables"/>
                </div>
                <!--<source>-->
<!--Thread A -> totalTime : set value to 1000-->
<!--Thread A -> tasks : set value to 10-->
<!--Main Thread -> totalTime : get value-->
<!--totalTime &ndash;&gt; Main Thread : 1000-->
<!--Thread B -> totalTime : set value to 4050-->
<!--Thread B -> tasks : set value to 35-->
<!--Main Thread -> tasks : get value-->
<!--tasks &ndash;&gt; Main Thread : 35-->
<!--Main Thread->Main Thread : totalTime / tasks-->
<!--</source>-->
                <p>
                    With this interleaving, the <code>totalTime</code> is updated to <code>4050</code> but <i>after</i>
                    the main thread has read the value for <code>totalTime</code> and <i>before</i> the related
                    operation to set the task count to <code>35</code> could be completed. This update hasn't been able
                    to complete before part of another operation has begun and so the consistency of the later will be
                    compromised. The values the main thread will use can be seen by the dotted return value above;
                    <code>1000 / 35 = 28.6</code>, it should either be <code>1000 / 10</code> or <code>4050 / 35</code>
                    but not part of each as in the example above.
                </p>
                <p>
                    Testing for consistency of the mean execution time (<code>getMeanExecutionTime</code>) is difficult.
                    Initially, a basic approach for the pessimistic version of the <code>ThreadPoolTimer</code> could
                    use real time but introduce uniform distribution of wait time for each timed thread. We can force an execution
                    time of between zero and five milliseconds and rely on the uniformity of the pseudo-random number
                    generator to make assertions. The theory being that any failures in the assertion are down to
                    bugs in the concurrent usage of the timer rather than natural variation in the wait time.
                </p>
<source>
public class ThreadPoolTimerIntegrationTest {

    private static final ThreadPoolTimer timer = new ThreadPoolTimer(...);

    @Rule public ConcurrentRule concurrent = new ConcurrentRule();
    @Rule public RepeatingRule repeating = new RepeatingRule();

    @Concurrent (count = 50)
    @Repeating (repetition = 100)
    @Test
    public void executeTask() {
        Runnable task = newRunnable();
        timer.beforeExecute(currentThread(), task);
        Introduce.jitter(upTo(millis(5)));
        timer.afterExecute(task, NO_EXCEPTION);
    }

    @AfterClass
    public static void verifyCounters() {
        assertThat(timer.getNumberOfExecutions(), is(5000L));
        assertThat(timer.getMeanExecutionTime(), is(2L));
        assertThat(timer.getTerminated(), is(0L));
    }
}
</source>
                <p>
                    Here, the test is using the same approach to spawning multiple threads as the <code>ThreadCounterIntegrationTest</code>.
                    Using real time here, we're attempting to introduce a delay of 2.5 milliseconds (on average)
                    between <code>timer.beforeExecute</code> and <code>timer.afterExecute</code>. The assertions
                    ensure that the number of executions is correct (as we know the expected count ahead of time) and
                    make a best guess on the mean execution time. Mostly, this will pass but it still represents an
                    intermittently failing test. Not good.
                </p>
                <p>
                    In the optimistic version, the actual time to execute outweighed the artificial delay skewing the
                    assumption that on average the time taken would be 2.5 milliseconds. We can't rely on the forced delay
                    being the dominant contributor as the actual execution time took proportionally longer than the
                    simulated delay. Anecdotally, this is likely to be caused by contention and retries in the STM but
                    we'll revisit that later. The affect was a good reminder why using real time can be problematic and
                    forced a rethink.
                </p>
                <p>
                    Somehow, we really want to control time but with more complex semantics than the simple <code>StopWatch</code>
                    example above. In the case of the <code>ThreadPoolTimer</code> it effectively has to maintain multiple
                    stopwatches, so we'd need to control multiple instances of time!
                </p>
            </subsection>

            <subsection name="The Use of ThreadLocal">
                <p>
                    The <code>ThreadLocal</code> class allows us to associate a variable with a particular thread, it
                    basically maintains a map of threads to instance variables. Because only a single thread can access
                    a variable, it is inherently thread-safe and doesn't really fall into a classification as either
                    optimistic or pessimistic control; it's just enforcing serial, single-threaded behaviour.
                </p>
                <p>
                    In testing for the race condition when calculating mean execution time, we make life easier for
                    ourselves if we can control the stopwatch used to time the execution from within the test. Usually,
                    we can just use something like the <code>MovableClock</code> class to do this, effectively mocking
                    the stopwatch within the test. However, the <code>ThreadPoolTimer</code> is required to
                    use multiple stopwatches, one for each thread it's responsible for timing.
                </p>
                <p>
                    For example, when the timer starts the stopwatch, it must do so for the current thread. The
                    class requires that the current thread be passed into the <code>beforeExecute</code> method in order
                    to ensure this. When another timer is started by calling the same method (lets say, at the same time,
                    but from a different thread), the class should start a new stopwatch tied to the current thread.
                    This requirement is largely influenced by the semantics of the <code>java.util.concurrent.ThreadPoolExecutor</code>
                    which provides the before and after extension points that we'll be using.
                </p>
                <p>
                    A basic implementation would be to associate a thread with a map, start a stopwatch and associate
                    it with that thread. Fortunately for us, that's exactly what <code>ThreadLocal</code> provides. So,
                    assuming the method is called with the correct parameters (see the <code>assert</code> below), we
                    can just use a <code>ThreadLocalStopWatch</code> for the <code>timer</code> instance below.
                </p>
                <source>
@Override
public void beforeExecute(Thread thread, Runnable task) {
    assert(Thread.currentThread().equals(thread));
    timer.start();
    // increment the total task count
}

@Override
public void afterExecute(Runnable task, Throwable throwable) {
    timer.stop();
    totalTime.add(timer.elapsedTime());
}
</source>
                <p>
                    This still leaves the question of testing it <i>and</i> controlling the time. The test above uses
                    a static <code>ThreadPoolTimer</code> and so we need to be able to share an instance of a
                    <code>Clock</code> between the threads (as it will also need to be static) but maintain per-thread
                    semantics. Sounds like a job for <code>ThreadLocal</code> again.
                </p>
<source>
public class ThreadLocalMovableClock implements Clock {

    private final ThreadLocal&lt;Date&gt; now;

    public ThreadLocalMovableClock() {
        now = new ThreadLocal&lt;Date&gt;() {
            @Override
            protected Date initialValue() {
                return new Date(0);
            }
        };
    }

    public ThreadLocalMovableClock(final Date date) {
        now = new ThreadLocal&lt;Date&gt;() {
            @Override
            protected Date initialValue() {
                return new Date(date.getTime());
            }
        };
    }

    @Override
    public Date time() {
        return new Date(now.get().getTime());
    }

    public void incrementBy(Duration time) {
        now.get().setTime(now.get().getTime() + time.inMillis());
    }
}
</source>
            </subsection>
            <p>
                We can now use this to make our test more deterministic and not reliant on real time.
            </p>
<source>
public class ThreadPoolTimerIntegrationTest {

    private static final ThreadLocalMovableClock clock = new ThreadLocalMovableClock();
    private static final ThreadPoolTimer timer = new ThreadPoolTimer(...);
    private static final Throwable NO_EXCEPTION = null;

    
    @Rule public ConcurrentRule concurrent = new ConcurrentRule();
    @Rule public RepeatingRule repeating = new RepeatingRule();


    @Concurrent (count = 50)
    @Repeating (repetition = 100)
    @Test
    public void executeTask() {
        Runnable task = newRunnable();
        timer.beforeExecute(currentThread(), task);
        clock.incrementBy(millis(400));
        timer.afterExecute(task, NO_EXCEPTION);
        Introduce.jitter();
    }

    
    @AfterClass
    public static void verifyCounters() {
        assertThat(timer.getNumberOfExecutions(), is(5000L));
        assertThat(timer.getMeanExecutionTime(), is(400L));
        assertThat(timer.getTerminated(), is(0L));
    }
}
</source>
            <p>
                To specifically test for the race condition, we should be able check the consistency of the date during
                multiple updates. A test similar to the above but with assertions immediately after the updates would be
                better but the tricky part is moving time forward a different amount for each thread and be able to
                make meaningful assertions. The test below achieves this by manually controlling the number of threads and
                iterations per thread (rather than use the <code>ConcurrentRule</code> and <code>RepeatingRule</code> and
                then using the thread count to create a multiplier for the delay in the stopwatch.
            </p>
<source>
public class ThreadPoolTimerRaceConditionIntegrationTest {

    private static final int threadCount = 50;
    private static final int repetitions = 100;

    private static final ThreadLocalMovableClock clock = new ThreadLocalMovableClock();
    private static final ThreadPoolTimer timer = new ThreadPoolTimer(new SynchronisingGuard(), new ThreadLocalStopWatch(clock), new AtomicLongCounter(), new AtomicLongCounter(), new AtomicMillisecondCounter());
    private static final Throwable NO_EXCEPTION = null;

    @Test
    public void executeTask() throws InterruptedException, ExecutionException {
        List&lt;Future&lt;?&gt;&gt; futures = new ArrayList&lt;Future&lt;?&gt;&gt;();
        ExecutorService pool = newFixedThreadPool(threadCount);
        for (int i = 1; i &lt;= threadCount; i++)
            futures.add(pool.submit(newTestThread(millis(threadCount * 10))));
        for (Future&lt;?&gt; future : futures)
            future.get();
        shutdown(pool).waitingForCompletion(seconds(5));
    }

    private static Callable&lt;Void&gt; newTestThread(final Duration delay) {
        return new Callable&lt;Void&gt;() {
            @Override
            public Void call() throws RuntimeException {
                for (int count = 1; count &lt;= repetitions; count++) {
                    Runnable task = newRunnable();
                    timer.beforeExecute(currentThread(), task);
                    clock.incrementBy(delay);
                    timer.afterExecute(task, NO_EXCEPTION);
                    assertThat(timer.getMeanExecutionTime(), is(delay.inMillis()));
                    Introduce.jitter();
                }
                return null;
            }
        };
    }
}    
</source>

            <subsection name="What to Guard">
                <p>
                    Having gone some way to creating tests to uncover concurrency problems, a basic implementation of
                    the <code>ThreadPoolTimer</code> might look like the following
                </p>
                <source>
public class ThreadPoolTimer implements ThreadPoolObserver, ThreadPoolTimerMBean {

    private final Guard guard;
    private final StopWatch timer;
    private final Counter tasks;
    private final Counter terminated;
    private final AccumulatingCounter&lt;Duration&gt; totalTime;

    public ThreadPoolTimer(Guard guard, StopWatch timer, Counter tasks, Counter terminated, AccumulatingCounter&lt;Duration&gt; totalTime) {
        this.timer = timer;
        this.tasks = tasks;
        this.terminated = terminated;
        this.totalTime = totalTime;
        this.guard = guard;
    }

    @Override
    public void beforeExecute(Thread thread, Runnable task) {
        assert(Thread.currentThread().equals(thread));
        timer.start();
    }

    @Override
    public void afterExecute(Runnable task, Throwable throwable) {
        timer.stop();
        tasks.increment();
        totalTime.add(timer.elapsedTime());
    }

    @Override
    public void terminated() {
        terminated.increment();
    }

    @Override
    public Long getNumberOfExecutions() {
        return tasks.get();
    }

    @Override
    public Long getTotalTime() {
        return totalTime.get();
    }

    @Override
    public Long getMeanExecutionTime() {
        return guard.execute(divide(totalTime, by(tasks)));
    }

    @Override
    public Long getTerminated() {
        return terminated.get();
    }

    @Override
    public void reset() {
        totalTime.reset();
        tasks.reset();
        terminated.reset();
    }
}                    
</source>
                <p>
                    This implementation fails the above race condition test (<code>ThreadPoolTimerRaceConditionIntegrationTest</code>).
                    The use of the <code>guard</code> in the <code>getMeanExecutionTime</code> and variable write methods
                    ensure that writes to individual variables are coordinated with the reads. Updates during the read
                    are prevented but our test still fails. It turns out we've missed something fundamental here, the
                    guard doesn't actually protect us from specific interleaving when the protected methods have themselves
                    completed. The interleaving showing diagram in Fig.XXX above is still very much possible. We'd need
                    to coordinate read and writes access of multiple variables in order to preserve consistent behaviour
                    under concurrent usage.
                </p>
                <p>
                    The offending methods from the the original implementation are shown below.
                </p>
                <source>
public void afterExecute(Runnable task, Throwable throwable) {
    timer.stop();
    tasks.increment();
    totalTime.add(timer.elapsedTime());
}

public Long getMeanExecutionTime() {
    return guard.execute(divide(totalTime, by(tasks)));
}
                </source>
                <p>
                    This shows that although the three lines in the <code>afterExecute</code> method are individually 
                    thread safe, they do not preserve any aromaticity with respect to each other. The task counter and 
                    total time can be updated independently as in diagram Fig.XXX above. We can fix this by employing the 
                    same gaurd the <code>getMeanExecutionTime</code> method uses as below.
                </p>
            </subsection>
            <source>
public void beforeExecute(Thread thread, Runnable task) {
    assert (Thread.currentThread().equals(thread));
    timer.start();
}

public void afterExecute(Runnable task, Throwable throwable) {
    timer.stop();
    <b>guard.execute</b>(new Callable&lt;Void, RuntimeException&gt;() {
        @Override
        public Void call() throws RuntimeException {
            tasks.increment();
            totalTime.add(timer.elapsedTime());
            return null;
        }
    });
}

public Long getMeanExecutionTime() {
    return guard.execute(divide(totalTime, by(tasks)));
}                
            </source>
            <p>
                The implementation now passes our test. Access to individual variables is now coordinated using the
                guard as shown in the gorilla UML below. The diagram is trying to indicate that the updates and the reads
                (along with the calculation) are now all protected.
            </p>
            <div class="figure">
                <img alt="coordinated access to variables" src="images/thread_pool_timer/fig-1.3.png"/>Ëœ
            </div>
<!--opt guarded-->
   <!--Thread A -> totalTime : set value to 1000-->
   <!--Thread A -> tasks : set value to 10-->
<!--end-->
<!--opt guarded-->
   <!--Thread B -> totalTime : set value to 4050-->
   <!--Thread B -> tasks : set value to 35-->
<!--end-->
<!--opt guarded-->
   <!--Main Thread -> totalTime : get value-->
   <!--totalTime &ndash;&gt; Main Thread : 4050-->
   <!--Main Thread -> tasks : get value-->
   <!--tasks &ndash;&gt; Main Thread : 35                -->
   <!--Main Thread->Main Thread : totalTime / tasks-->
<!--end-->
            <p>
                We can further tidy up the code by using instances of <code>Callable</code> classes rather than the
                anonymous version like this.
            </p>
            <source>
public void afterExecute(Runnable task, Throwable throwable) {
    timer.stop();
    guard.execute(
        <i>allOf</i>(
            <i>increment</i>(tasks),
            <i>add</i>(timer.elapsedTime(), to(totalTime))
        )
    );
}
            </source>

            <subsection name="Summary">
                <p>
                    The development steps for the <code>ThreadPoolTimer</code> followed the now familiar steps.
                </p>
                <ol>
                    <li>
                        <p>
                            Develop unit test to drive out the behaviour of the timer in a <b>non-concurrent usage</b> (<code>ThreadPoolTimerTest</code>)
                        </p>
                    </li>
                    <li>
                        <p>
                            Develop the basic timer class to pass the test
                        </p>
                    </li>
                    <li>
                        <p>
                            Develop the a integration test running in a concurrent context
                            (<code>ThreadPoolTimerIntegrationTest</code>) to identify individual elements that require
                            concurrency control.
                        </p>
                    </li>
                    <li>
                        <p>
                            Extend the class, make the test pass. Our example forced the use of <code>Counter</code> variables which
                            could be made thread safe.
                        </p>
                    </li>
                    <li>
                        <p>
                            Identify any collaborating elements that require concurrency control, formulate as a test
                            (<code>ThreadPoolTimerRaceConditionIntegrationTest</code>)
                        </p>
                    </li>
                    <li>
                        <p>
                            Extend the class, make the test pass. Our example forced guarding collaborating variables
                            rather than making individual variables thread safe.
                        </p>
                    </li>
                </ol>
                <p>
                    Interestingly, to some degree steps 3. and 5. require some analysis from the developer <i>before</i>
                    the test can be written. For step 1., the test can genuinely be written first to <i>drive</i> out
                    behaviour but for the other testing steps, an understanding of the concurrency loop holes is required
                    so that a test can be tailored to expose them. This is an uncomfortable situation for the TDD
                    practitioner to be in but with concurrency tests, it often boils down to spotting the holes first
                    then filling them rather than letting the tests expose the holes for you.
                </p>
            </subsection>
        </section>

    </body>

</document>